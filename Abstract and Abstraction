Abstract class in Java
A class which is declared as abstract is known as an abstract class. It can have abstract and non-abstract methods. It needs to be extended and its method implemented. It cannot be instantiated.

Points to Remember
An abstract class must be declared with an abstract keyword.
It can have abstract and non-abstract methods.
It cannot be instantiated.
It can have constructors and static methods also.
It can have final methods which will force the subclass not to change the body of the method.


Example of Abstract class that has an abstract method:

*****************************************************************************
abstract class Bank{    
abstract int getRateOfInterest();    
}    
class SBI extends Bank{    
int getRateOfInterest(){return 7;}    
}    
class PNB extends Bank{    
int getRateOfInterest(){return 8;}    
}    
    
class TestBank{    
public static void main(String args[]){    
Bank b;  
b=new SBI();  
System.out.println("Rate of Interest is: "+b.getRateOfInterest()+" %");    
b=new PNB();  
System.out.println("Rate of Interest is: "+b.getRateOfInterest()+" %");    
}}

Output:
Rate of Interest is: 7 %
Rate of Interest is: 8 %
*****************************************************************************

Abstraction in Java:
Abstraction is a process of hiding the implementation details and showing only functionality to the user.

Another way, it shows only essential things to the user and hides the internal details, for example, sending SMS where you type the text and send the message. You don't know the internal processing about the message delivery.

Abstraction lets you focus on what the object does instead of how it does it.

Ways to achieve Abstraction
There are two ways to achieve abstraction in java

Abstract class (0 to 100%)
Interface (100%)


*****************************************************************************
package com.practise;

 abstract class Vehicle {
	  abstract void start();
	  
 }
   class Car extends  Vehicle{

	@Override
	void start() {
		 System.out.println(" car start with self");
	}
	   
   }
    class Bike extends Vehicle{

		@Override
		void start() {
			 System.out.println(" Bike Start with kick");
		}
    	
    }


public class Abstraction {

	public static void main(String[] args) {
		 Car c=new Car();
		 c.start();
			 Bike b=new Bike();
			  b.start();
			
		
		
	}

}



concrete:
package com.practise;
 abstract class Demo1{
	  abstract void show();
	   void view() {
		   System.out.println("this is  concrete method of abstract");
	   }
 }
 class Start1 extends Demo1{

	@Override
	void show() {
		System.out.println("this ");// TODO Auto-generated method stub
		
	}
	 
 }
public class ConcreteMethod {

	public static void main(String[] args) {
		 Start1 s=new Start1();
		 // calling an object of the Start class
		
		  // Calling the concrete method
		 s.view();
		 s.show();
